# Rate-limiting: https://www.nginx.com/blog/rate-limiting-nginx
# State information for about 16,000 IP addresses takes ~ 1 megabyte
# We set it for 10m, so we have ~ 160,000 IP addresses in memory available.

# Almost everywhere we used burst and nodelay. What does it mean ?
# Suppose that we have rate limit of 10r/s.
# It basically means that a client can make 1 request every 100ms.
# If he does two requests at once, he will be rejected. In most cases, we actually don't want that.
# We want to except temporary spikes in traffic, but limit the overall number of requests that single client can make.
# Let's now say that we have 10r/s limit with burst=10 nodelay;
# It means that a client can make 1 + 10 request at once (in less than 100ms).
# These 10 excessive requests are put on the queue. In this example, request number 12 (remember 1 + 10 limit) will be rejected.
# Burst of 10 means, that every 1000 ms / 10 = 100ms one bucket from the queue will be freed.
# So client can make 11 requests at once, but he needs to wait 100ms for the next slot in the queue to be available for him.
# Thanks to that, we can set hard limit for vulnerable endpoints, like /contact-message to 1r/m,
# but allow to make 10 requests at once. So the client will be able to create 11 messages at once, but then he will need to wait
# whole minute to create the next one.
# Remember that burst queues are shared, when given zone is used across multiple locations!

limit_req_zone $binary_remote_addr zone=static_limit:10m rate=25r/s;

# limit_req_zone $binary_remote_addr zone=api_client_events_limit:10m rate=5r/s;
# limit_req_zone $binary_remote_addr zone=api_contact_messages_limit:10m rate=1r/m;
# limit_req_zone $binary_remote_addr zone=api_email_endpoint_limit:10m rate=3r/m;
# Additional guard against brute force attacks
limit_req_zone $binary_remote_addr zone=api_user_auth_limit:10m rate=1r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=25r/s;
# limit_req_zone $binary_remote_addr zone=api_file_limit:10m rate=50r/s;

log_format upstream_time '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent"'
                         'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

server {
    #listen on all addresses
    listen ${HTTP_PORT};
    listen [::]:${HTTP_PORT};

    return 301 https://$host:$request_uri;
}

server {
    #listen on all addresses
    listen ${HTTPS_PORT} ssl http2;
    listen  [::]:${HTTPS_PORT} ssl http2;

    server_name  ${DOMAIN} www.${DOMAIN};

    access_log  /dev/stdout;
    error_log /dev/stderr;

    root   /usr/share/nginx/site;
    index  index.html;
    client_max_body_size 5m;

    ssl_certificate /etc/certs/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/certs/live/${DOMAIN}/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;


    gzip on;
    gzip_types
        text/plain
        text/css
        text/xml
        application/javascript
        application/json
        application/x-javascript
        application/xml;
    gzip_min_length 1000;

    location ~* \.(html)$ {
        limit_req zone=static_limit burst=25 nodelay;
        etag on;
        add_header Cache-Control "no-cache";

        log_not_found off;
    }

    #Special file with app version, we must never cache it
    location ~* (app-version.json)$ {
        limit_req zone=static_limit burst=25 nodelay;
        etag off;
        add_header Cache-Control "no-cache";
        log_not_found off;
    }

    location ~* \.(ico)$ {
        limit_req zone=static_limit burst=25 nodelay;
        expires 1d;
        etag off;
        if_modified_since off;
        add_header Cache-Control "public, immutable";

        log_not_found off;
    }

    location ~* \.(.*)$ {
        limit_req zone=static_limit burst=100 nodelay;
        expires 1y;
        etag off;
        if_modified_since off;
        add_header Cache-Control "public, immutable";

        log_not_found off;
    }

    # Path for let's encrypt challenge file
    location ^~ /.well-known {
        etag off;
        add_header Cache-Control "no-cache";
        log_not_found off;
    }

    location / {
        # Redirect 404 errors to index.html for js routes, without file extension: /user, /profile etc.
        limit_req zone=static_limit burst=25 nodelay;
        log_not_found off;
        error_page 404 =200 /index.html;
    }

    # location = /api/client-events {
    #     limit_req zone=api_client_events_limit burst=10 nodelay;

    #     proxy_pass ${APP_URL}/client-events;

    #     access_log  /dev/stdout upstream_time;
    #     proxy_set_header X-Real-IP $remote_addr;
    # }

    # location = /api/contact-messages {
    #     # Up to 10 requests at once, but only 1 requests per minute on average are permitted, so it's safe
    #     limit_req zone=api_contact_messages_limit burst=10 nodelay;
    #     proxy_pass ${APP_URL}/contact-messages;

    #     access_log  /dev/stdout upstream_time;
    #     proxy_set_header X-Real-IP $remote_addr;
    # }

    location = /api/user-auth/ {
        # Up to 50 requests at once, but only 1 request per second, so it's safe
        limit_req zone=api_user_auth_limit burst=50 nodelay;
        proxy_pass ${APP_URL}/user-auth/;

        access_log  /dev/stdout upstream_time;
        proxy_set_header X-Real-IP $remote_addr;
    }

    #Forward matching regex is needed to take precedence over ending (.*)$ rules
    # location ^~ /api/file/ {
    #     limit_req zone=api_file_limit burst=100 nodelay;
    #     proxy_pass ${APP_URL}/file/;

    #     access_log  /dev/stdout upstream_time;
    #     proxy_set_header X-Real-IP $remote_addr;
    # }

    #Forward matching regex is needed to take precedence over ending (.*)$ rules
    location ^~ /api/ {
        limit_req zone=api_limit burst=50 nodelay;
        proxy_pass ${APP_URL}/;

        access_log  /dev/stdout upstream_time;
        proxy_set_header X-Real-IP $remote_addr;

        #Future:
        # upstream api {
        #   ip_hash;
        #   server ${NGINX_APP_URL1} max_fails=1 fail_timeout=5s;
        #   server ${NGINX_APP_URL2};
        #}
    }

    location /nginx-status {
        allow 127.0.0.1;
        deny all;
        stub_status;
    }

    error_page 413 /413.json;
    location =/413.json {
        default_type application/json;
        return 413 '{ "error": "BodyTooLargeException", "reasons": [], "message": "Too large body, max is 5MB" }';
    }

    error_page 502 /502.json;
    location =/502.json {
        default_type application/json;
        return 502 '{ "error": "ApiUnavailableException", "reasons": [], "message": "Api is not available" }';
    }

    error_page 503 /503.json;
    location =/503.json {
        default_type application/json;
        return 503 '{ "error": "TooManyRequestsException", "reasons": [], "message": "You did too many requests" }';
    }
}