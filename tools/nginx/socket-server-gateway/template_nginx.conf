# Rate-limiting: https://www.nginx.com/blog/rate-limiting-nginx
# State information for about 16,000 IP addresses takes ~ 1 megabyte
# We set it for 10m, so we have ~ 160,000 IP addresses in memory available.

# Almost everywhere we used burst and nodelay. What does it mean ?
# Suppose that we have rate limit of 10r/s.
# It basically means that a client can make 1 request every 100ms.
# If he does two requests at once, he will be rejected. In most cases, we actually don't want that.
# We want to except temporary spikes in traffic, but limit the overall number of requests that single client can make.
# Let's now say that we have 10r/s limit with burst=10 nodelay;
# It means that a client can make 1 + 10 request at once (in less than 100ms).
# These 10 excessive requests are put on the queue. In this example, request number 12 (remember 1 + 10 limit) will be rejected.
# Burst of 10 means, that every 1000 ms / 10 = 100ms one bucket from the queue will be freed.
# So client can make 11 requests at once, but he needs to wait 100ms for the next slot in the queue to be available for him.
# Thanks to that, we can set hard limit for vulnerable endpoints, like /contact-message to 1r/m,
# but allow to make 10 requests at once. So the client will be able to create 11 messages at once, but then he will need to wait
# whole minute to create the next one.
# Remember that burst queues are shared, when given zone is used across multiple locations!

limit_req_zone $binary_remote_addr zone=sockets_limit:10m rate=3r/s;

log_format upstream_time '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent"'
                         'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

server {
    # listen on all addresses
    listen ${HTTP_PORT};
    listen [::]:${HTTP_PORT};

    location / {
        return 301 https://$host:$request_uri;
    }

    gzip on;
    gzip_types
        text/plain
        text/css
        text/xml
        application/javascript
        application/json
        application/x-javascript
        application/xml;
    gzip_min_length 1000;

    # path for let's encrypt challenge file, http required!
    location ^~ /.well-known {
        root   /usr/share/nginx/site;
        etag off;
        add_header Cache-Control "no-cache";
        log_not_found off;
    }

    #Metrics for health/prometheus
    location /actuator/ {
        allow 127.0.0.1;
        allow ${PRIVATE_IP_RANGE};
        deny all;

        proxy_pass ${APP_URL}/actuator/;
        access_log  /dev/stdout upstream_time;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

server {
    # listen on all addresses
    listen ${HTTPS_PORT} ssl http2;
    listen  [::]:${HTTPS_PORT} ssl http2;

    server_name  ${DOMAIN} www.${DOMAIN};

    access_log  /dev/stdout;
    error_log /dev/stderr;

    root   /usr/share/nginx/site;
    index  index.html;
    client_max_body_size 2m;

    ssl_certificate /etc/certs/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/certs/live/${DOMAIN}/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;

    gzip on;
    gzip_types
        text/plain
        text/css
        text/xml
        application/javascript
        application/json
        application/x-javascript
        application/xml;
    gzip_min_length 1000;

    #Metrics for health/prometheus only to be used internally by http, not https
    location /actuator {
        deny all;
    }

    #Web sockets
    location / {
        limit_req zone=sockets_limit burst=10 nodelay;
        proxy_pass ${APP_URL};
        proxy_http_version 1.1;
        proxy_set_header Upgrade "WebSocket";
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_send_timeout 10s;
        #Socket will die after that time, without sending any data
        proxy_read_timeout 30s;
    }

    location /nginx-status {
        allow 127.0.0.1;
        deny all;
        stub_status;
    }

}