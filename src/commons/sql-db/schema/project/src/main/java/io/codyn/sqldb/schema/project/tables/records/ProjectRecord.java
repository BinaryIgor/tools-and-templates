/*
 * This file is generated by jOOQ.
 */
package io.codyn.sqldb.schema.project.tables.records;


import io.codyn.sqldb.schema.project.tables.Project;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectRecord extends UpdatableRecordImpl<ProjectRecord> implements Record4<UUID, UUID, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>project.project.id</code>.
     */
    public ProjectRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>project.project.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>project.project.owner_id</code>.
     */
    public ProjectRecord setOwnerId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>project.project.owner_id</code>.
     */
    public UUID getOwnerId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>project.project.name</code>.
     */
    public ProjectRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>project.project.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>project.project.version</code>.
     */
    public ProjectRecord setVersion(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>project.project.version</code>.
     */
    public Long getVersion() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Project.PROJECT.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Project.PROJECT.OWNER_ID;
    }

    @Override
    public Field<String> field3() {
        return Project.PROJECT.NAME;
    }

    @Override
    public Field<Long> field4() {
        return Project.PROJECT.VERSION;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getOwnerId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Long component4() {
        return getVersion();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getOwnerId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Long value4() {
        return getVersion();
    }

    @Override
    public ProjectRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ProjectRecord value2(UUID value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public ProjectRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProjectRecord value4(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public ProjectRecord values(UUID value1, UUID value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectRecord
     */
    public ProjectRecord() {
        super(Project.PROJECT);
    }

    /**
     * Create a detached, initialised ProjectRecord
     */
    public ProjectRecord(UUID id, UUID ownerId, String name, Long version) {
        super(Project.PROJECT);

        setId(id);
        setOwnerId(ownerId);
        setName(name);
        setVersion(version);
    }
}
