/*
 * This file is generated by jOOQ.
 */
package io.codyn.sqldb.schema.user.tables;


import io.codyn.sqldb.schema.user.Indexes;
import io.codyn.sqldb.schema.user.Keys;
import io.codyn.sqldb.schema.user.User;
import io.codyn.sqldb.schema.user.tables.records.ActivationTokenRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivationToken extends TableImpl<ActivationTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user.activation_token</code>
     */
    public static final ActivationToken ACTIVATION_TOKEN = new ActivationToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivationTokenRecord> getRecordType() {
        return ActivationTokenRecord.class;
    }

    /**
     * The column <code>user.activation_token.id</code>.
     */
    public final TableField<ActivationTokenRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>user.activation_token.token</code>.
     */
    public final TableField<ActivationTokenRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>user.activation_token.expires_at</code>.
     */
    public final TableField<ActivationTokenRecord, Instant> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>user.activation_token.type</code>.
     */
    public final TableField<ActivationTokenRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    private ActivationToken(Name alias, Table<ActivationTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActivationToken(Name alias, Table<ActivationTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user.activation_token</code> table reference
     */
    public ActivationToken(String alias) {
        this(DSL.name(alias), ACTIVATION_TOKEN);
    }

    /**
     * Create an aliased <code>user.activation_token</code> table reference
     */
    public ActivationToken(Name alias) {
        this(alias, ACTIVATION_TOKEN);
    }

    /**
     * Create a <code>user.activation_token</code> table reference
     */
    public ActivationToken() {
        this(DSL.name("activation_token"), null);
    }

    public <O extends Record> ActivationToken(Table<O> child, ForeignKey<O, ActivationTokenRecord> key) {
        super(child, key, ACTIVATION_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return User.USER_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACTIVATION_TOKEN_EXPIRES_AT);
    }

    @Override
    public UniqueKey<ActivationTokenRecord> getPrimaryKey() {
        return Keys.ACTIVATION_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<ActivationTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivationTokenRecord>>asList(Keys.ACTIVATION_TOKEN_PKEY, Keys.ACTIVATION_TOKEN_TOKEN_KEY);
    }

    @Override
    public List<ForeignKey<ActivationTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActivationTokenRecord, ?>>asList(Keys.ACTIVATION_TOKEN__ACTIVATION_TOKEN_ID_FKEY);
    }

    private transient io.codyn.sqldb.schema.user.tables.User _user;

    public io.codyn.sqldb.schema.user.tables.User user() {
        if (_user == null)
            _user = new io.codyn.sqldb.schema.user.tables.User(this, Keys.ACTIVATION_TOKEN__ACTIVATION_TOKEN_ID_FKEY);

        return _user;
    }

    @Override
    public ActivationToken as(String alias) {
        return new ActivationToken(DSL.name(alias), this);
    }

    @Override
    public ActivationToken as(Name alias) {
        return new ActivationToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivationToken rename(String name) {
        return new ActivationToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivationToken rename(Name name) {
        return new ActivationToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, Instant, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
