/*
 * This file is generated by jOOQ.
 */
package io.codyn.commons.sqldb.schema.user.tables.records;


import io.codyn.commons.sqldb.schema.user.tables.SecondFactorAuthentication;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecondFactorAuthenticationRecord extends UpdatableRecordImpl<SecondFactorAuthenticationRecord> implements Record5<UUID, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>user.second_factor_authentication.id</code>.
     */
    public SecondFactorAuthenticationRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>user.second_factor_authentication.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>user.second_factor_authentication.email</code>.
     */
    public SecondFactorAuthenticationRecord setEmail(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>user.second_factor_authentication.email</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>user.second_factor_authentication.code</code>.
     */
    public SecondFactorAuthenticationRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>user.second_factor_authentication.code</code>.
     */
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>user.second_factor_authentication.sent_at</code>.
     */
    public SecondFactorAuthenticationRecord setSentAt(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>user.second_factor_authentication.sent_at</code>.
     */
    public LocalDateTime getSentAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>user.second_factor_authentication.expires_at</code>.
     */
    public SecondFactorAuthenticationRecord setExpiresAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>user.second_factor_authentication.expires_at</code>.
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SecondFactorAuthentication.SECOND_FACTOR_AUTHENTICATION.ID;
    }

    @Override
    public Field<String> field2() {
        return SecondFactorAuthentication.SECOND_FACTOR_AUTHENTICATION.EMAIL;
    }

    @Override
    public Field<String> field3() {
        return SecondFactorAuthentication.SECOND_FACTOR_AUTHENTICATION.CODE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return SecondFactorAuthentication.SECOND_FACTOR_AUTHENTICATION.SENT_AT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SecondFactorAuthentication.SECOND_FACTOR_AUTHENTICATION.EXPIRES_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getEmail();
    }

    @Override
    public String component3() {
        return getCode();
    }

    @Override
    public LocalDateTime component4() {
        return getSentAt();
    }

    @Override
    public LocalDateTime component5() {
        return getExpiresAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getEmail();
    }

    @Override
    public String value3() {
        return getCode();
    }

    @Override
    public LocalDateTime value4() {
        return getSentAt();
    }

    @Override
    public LocalDateTime value5() {
        return getExpiresAt();
    }

    @Override
    public SecondFactorAuthenticationRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SecondFactorAuthenticationRecord value2(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public SecondFactorAuthenticationRecord value3(String value) {
        setCode(value);
        return this;
    }

    @Override
    public SecondFactorAuthenticationRecord value4(LocalDateTime value) {
        setSentAt(value);
        return this;
    }

    @Override
    public SecondFactorAuthenticationRecord value5(LocalDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public SecondFactorAuthenticationRecord values(UUID value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecondFactorAuthenticationRecord
     */
    public SecondFactorAuthenticationRecord() {
        super(SecondFactorAuthentication.SECOND_FACTOR_AUTHENTICATION);
    }

    /**
     * Create a detached, initialised SecondFactorAuthenticationRecord
     */
    public SecondFactorAuthenticationRecord(UUID id, String email, String code, LocalDateTime sentAt, LocalDateTime expiresAt) {
        super(SecondFactorAuthentication.SECOND_FACTOR_AUTHENTICATION);

        setId(id);
        setEmail(email);
        setCode(code);
        setSentAt(sentAt);
        setExpiresAt(expiresAt);
    }
}
