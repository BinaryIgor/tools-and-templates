/*
 * This file is generated by jOOQ.
 */
package io.codyn.commons.sqldb.schema.project.tables;


import io.codyn.commons.sqldb.schema.project.Keys;
import io.codyn.commons.sqldb.schema.project.Project;
import io.codyn.commons.sqldb.schema.project.tables.records.ProjectUserRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectUser extends TableImpl<ProjectUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>project.project_user</code>
     */
    public static final ProjectUser PROJECT_USER = new ProjectUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectUserRecord> getRecordType() {
        return ProjectUserRecord.class;
    }

    /**
     * The column <code>project.project_user.project_id</code>.
     */
    public final TableField<ProjectUserRecord, UUID> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>project.project_user.user_id</code>.
     */
    public final TableField<ProjectUserRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    private ProjectUser(Name alias, Table<ProjectUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectUser(Name alias, Table<ProjectUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>project.project_user</code> table reference
     */
    public ProjectUser(String alias) {
        this(DSL.name(alias), PROJECT_USER);
    }

    /**
     * Create an aliased <code>project.project_user</code> table reference
     */
    public ProjectUser(Name alias) {
        this(alias, PROJECT_USER);
    }

    /**
     * Create a <code>project.project_user</code> table reference
     */
    public ProjectUser() {
        this(DSL.name("project_user"), null);
    }

    public <O extends Record> ProjectUser(Table<O> child, ForeignKey<O, ProjectUserRecord> key) {
        super(child, key, PROJECT_USER);
    }

    @Override
    public Schema getSchema() {
        return Project.PROJECT;
    }

    @Override
    public UniqueKey<ProjectUserRecord> getPrimaryKey() {
        return Keys.PROJECT_USER_PKEY;
    }

    @Override
    public List<UniqueKey<ProjectUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectUserRecord>>asList(Keys.PROJECT_USER_PKEY);
    }

    @Override
    public List<ForeignKey<ProjectUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectUserRecord, ?>>asList(Keys.PROJECT_USER__PROJECT_USER_PROJECT_ID_FKEY);
    }

    private transient io.codyn.commons.sqldb.schema.project.tables.Project _project;

    public io.codyn.commons.sqldb.schema.project.tables.Project project() {
        if (_project == null)
            _project = new io.codyn.commons.sqldb.schema.project.tables.Project(this, Keys.PROJECT_USER__PROJECT_USER_PROJECT_ID_FKEY);

        return _project;
    }

    @Override
    public ProjectUser as(String alias) {
        return new ProjectUser(DSL.name(alias), this);
    }

    @Override
    public ProjectUser as(Name alias) {
        return new ProjectUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectUser rename(String name) {
        return new ProjectUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectUser rename(Name name) {
        return new ProjectUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
