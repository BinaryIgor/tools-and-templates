# Rate-limiting: https://www.nginx.com/blog/rate-limiting-nginx
# State information for about 16,000 IP addresses takes ~ 1 megabyte
# We set it for 10m, so we have ~ 160,000 IP addresses in memory available.

# Almost everywhere we used burst and nodelay. What does it mean ?
# Suppose that we have rate limit of 10r/s.
# It basically means that a client can make 1 request every 100ms.
# If he does two requests at once, he will be rejected. In most cases, we actually don't want that.
# We want to except temporary spikes in traffic, but limit the overall number of requests that single client can make.
# Let's now say that we have 10r/s limit with burst=10 nodelay;
# It means that a client can make 1 + 10 request at once (in less than 100ms).
# These 10 excessive requests are put on the queue. In this example, request number 12 (remember 1 + 10 limit) will be rejected.
# Burst of 10 means, that every 1000 ms / 10 = 100ms one bucket from the queue will be freed.
# So client can make 11 requests at once, but he needs to wait 100ms for the next slot in the queue to be available for him.
# Thanks to that, we can set hard limit for vulnerable endpoints, like /contact-message to 1r/m,
# but allow to make 10 requests at once. So the client will be able to create 11 messages at once, but then he will need to wait
# whole minute to create the next one.
# Remember that burst queues are shared, when given zone is used across multiple locations!

# limit_req_zone $binary_remote_addr zone=static_limit:10m rate=25r/s;

# limit_req_zone $binary_remote_addr zone=api_client_event_limit:10m rate=5r/s;
# limit_req_zone $binary_remote_addr zone=api_contact_message_limit:10m rate=1r/m;
# limit_req_zone $binary_remote_addr zone=api_email_endpoint_limit:10m rate=3r/m;
# # Additional guard against brute force attacks
# limit_req_zone $binary_remote_addr zone=api_sign_in_limit:10m rate=1r/s;

# limit_req_zone $binary_remote_addr zone=api_limit:10m rate=25r/s;

# limit_req_zone $binary_remote_addr zone=api_file_limit:10m rate=50r/s;

limit_req_zone $binary_remote_addr zone=app_limit:10m rate=25r/s;

log_format upstream_time '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent"'
                         'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

# server {
#     #listen on all addresses
#     listen ${NGINX_HTTP_PORT};
#     listen [::]:${NGINX_HTTP_PORT};

#     return 301 https://$host:$request_uri;
# }

server {
    # listen on all addresses
    # listen ${NGINX_HTTPS_PORT} ssl http2;
    # listen  [::]:${NGINX_HTTPS_PORT} ssl http2;

    # ssl_certificate /etc/certs/fullchain.pem;
    # ssl_certificate_key /etc/certs/privkey.pem;
    # ssl_protocols TLSv1.2 TLSv1.3;

    # listen on all addresses
    listen ${HTTP_PORT};
    listen [::]:${HTTP_PORT};

    access_log  /dev/stdout;
    error_log /dev/stderr;

    root   /usr/share/nginx/site;
    index  index.html;
    client_max_body_size 5m;


    # gzip on;
    # gzip_types
    #     text/plain
    #     text/css
    #     text/xml
    #     application/javascript
    #     application/json
    #     application/x-javascript
    #     application/xml;
    # gzip_min_length 1000;

    # location ~* \.(html)$ {
    #     limit_req zone=static_limit burst=25 nodelay;
    #     etag on;
    #     add_header Cache-Control "no-cache";

    #     log_not_found off;
    # }

    #Special file with app version, we must never cache it
    # location ~* (app-version.json)$ {
    #     limit_req zone=static_limit burst=25 nodelay;
    #     etag off;
    #     add_header Cache-Control "no-cache";
    #     log_not_found off;
    # }

    # location ~* \.(ico)$ {
    #     limit_req zone=static_limit burst=25 nodelay;
    #     expires 1d;
    #     etag off;
    #     if_modified_since off;
    #     add_header Cache-Control "public, immutable";

    #     log_not_found off;
    # }

    # location ~* \.(.*)$ {
    #     limit_req zone=static_limit burst=100 nodelay;
    #     expires 1y;
    #     etag off;
    #     if_modified_since off;
    #     add_header Cache-Control "public, immutable";

    #     log_not_found off;
    # }

    #Forward matching regex is needed to take precedence over ending (.*)$ rules
    location / {
        limit_req zone=app_limit burst=50 nodelay;

        access_log  /dev/stdout upstream_time;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_pass ${APP_URL};
    }

    location /nginx-status {
        allow 127.0.0.1;
        deny all;
        stub_status;
    }

    error_page 413 /413.json;
    location =/413.json {
        default_type application/json;
        return 413 '{ "value": {}, "exceptions": { "codes": ["BODY_TOO_LARGE"], "details": "" } }';
    }

    error_page 502 /502.json;
    location =/502.json {
        default_type application/json;
        return 502 '{ "value": {}, "exceptions": { "codes": ["API_UNAVAILABLE"], "details": "" } }';
    }

    error_page 503 /503.json;
    location =/503.json {
        default_type application/json;
        return 503 '{ "value": {}, "exceptions": { "codes": ["TOO_MANY_REQUESTS"], "details": "" } }';
    }
}